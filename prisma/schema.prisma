// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user") // admin, user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  clients     Client[]
  tasks       Task[]
  interactions Interaction[]

  @@map("users")
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String        
  phone        String?
  clientType   String        // prospect, lead, customer, inactive
  leadScore    Int           @default(50)
  status       String        @default("active")
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relacionamentos
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]
  interactions Interaction[]

  @@unique([email, userId]) // Email único por usuário
  @@map("clients")
}

model Task {
  id               String   @id @default(cuid())
  title            String
  description      String?
  type             String   // call, email, meeting, follow-up
  priority         String   // low, medium, high
  status           String   @default("pending") // pending, in-progress, completed, cancelled
  dueDate          DateTime
  completedAt      DateTime?
  aiSuggested      Boolean  @default(false)
  estimatedDuration String? // "30 min", "1 hour", etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relacionamentos
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId         String
  client           Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Interaction {
  id          String   @id @default(cuid())
  type        String   // call, email, meeting, note
  content     String
  outcome     String?  // positive, neutral, negative
  nextAction  String?
  createdAt   DateTime @default(now())
  
  // Relacionamentos
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("interactions")
}
