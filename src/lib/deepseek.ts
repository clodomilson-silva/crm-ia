import { ClientSearchData } from '@/types/crm'

// Configura√ß√µes das APIs com fallback
const API_CONFIGS = {
  kimi: {
    name: 'DeepSeek R1 (OpenRouter)',
    url: 'https://openrouter.ai/api/v1/chat/completions',
    model: 'deepseek/deepseek-r1',
    apiKey: process.env.KIMI_API_KEY,
    headers: {
      'HTTP-Referer': 'http://localhost:3000',
      'X-Title': 'CRM com IA'
    }
  },
  tng: {
    name: 'DeepSeek Chat (OpenRouter)',
    url: 'https://openrouter.ai/api/v1/chat/completions',
    model: 'deepseek/deepseek-chat',
    apiKey: process.env.OPENROUTER_TNG_API_KEY,
    headers: {
      'HTTP-Referer': 'http://localhost:3000',
      'X-Title': 'CRM com IA'
    }
  }
}

// Fun√ß√£o para verificar limites e cr√©ditos de uma API key da OpenRouter
async function checkOpenRouterLimits(apiKey: string, apiName: string): Promise<void> {
  if (!apiKey || apiKey.length === 0) {
    console.log(`‚è≠Ô∏è  ${apiName}: API key n√£o configurada`)
    return
  }

  try {
    console.log(`üîç Verificando limites para ${apiName}...`)
    
    const response = await fetch('https://openrouter.ai/api/v1/auth/key', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    })

    if (!response.ok) {
      console.log(`‚ùå ${apiName}: Erro ${response.status} ao verificar limites`)
      return
    }

    const data = await response.json()
    
    // Exibir informa√ß√µes da chave
    console.log(`\nüìä === ${apiName} === `)
    console.log(`üîë Chave: ${apiKey.substring(0, 12)}...`)
    
    if (data.data) {
      const keyInfo = data.data
      console.log(`üí∞ Cr√©ditos: $${keyInfo.usage || 0} usado de $${keyInfo.limit || 'ilimitado'}`)
      console.log(`üÜì Tier gratuito: ${keyInfo.is_free_tier ? 'Sim' : 'N√£o'}`)
      
      if (keyInfo.rate_limit) {
        console.log(`‚ö° Rate limit: ${keyInfo.rate_limit.requests} req/${keyInfo.rate_limit.interval}`)
      }
      
      // Calcular porcentagem de uso
      if (keyInfo.limit && keyInfo.usage) {
        const usage = Number(keyInfo.usage)
        const limit = Number(keyInfo.limit)
        const percentage = ((usage / limit) * 100).toFixed(1)
        const percentageNum = Number(percentage)
        const status = percentageNum > 90 ? 'üî¥' : percentageNum > 70 ? 'üü°' : 'üü¢'
        console.log(`üìà Uso: ${percentage}% ${status}`)
      }
    }
    
    console.log(`‚úÖ ${apiName}: Verifica√ß√£o conclu√≠da\n`)
    
  } catch (error) {
    console.log(`üí• ${apiName}: Erro ao verificar limites - ${error}`)
  }
}

// Fun√ß√£o para verificar limites de todas as APIs configuradas
export async function checkAllAPILimits(): Promise<void> {
  console.log('\nüöÄ === VERIFICA√á√ÉO DE LIMITES DAS APIs ===')
  console.log('üìÖ Data:', new Date().toLocaleString('pt-BR'))
  console.log('=' .repeat(50))
  
  const apis = [
    { key: process.env.KIMI_API_KEY, name: 'API Principal (DeepSeek R1)' },
    { key: process.env.OPENROUTER_TNG_API_KEY, name: 'API Secund√°ria (DeepSeek Chat)' }
  ]
  
  for (const api of apis) {
    if (api.key) {
      await checkOpenRouterLimits(api.key, api.name)
    } else {
      console.log(`‚è≠Ô∏è  ${api.name}: N√£o configurada`)
    }
  }
  
  console.log('=' .repeat(50))
  console.log('üéØ Verifica√ß√£o completa! Sistema pronto para uso.\n')
}

export interface AIAnalysis {
  leadScore: number
  nextAction: string
  actionPriority: 'low' | 'medium' | 'high'
  reasoning: string
}

// Fun√ß√£o para verificar se pelo menos uma API est√° configurada
export function isAnyAIConfigured(): boolean {
  const configs = Object.values(API_CONFIGS)
  const availableAPIs = configs.filter(config => config.apiKey && config.apiKey.length > 0)
  
  console.log('üîç Verificando APIs dispon√≠veis:')
  configs.forEach(config => {
    const status = config.apiKey ? '‚úÖ Configurada' : '‚ùå N√£o configurada'
    console.log(`  ${config.name}: ${status}`)
  })
  
  if (availableAPIs.length === 0) {
    console.log('‚ö†Ô∏è  Nenhuma API configurada. Usando fallback.')
    return false
  }
  
  console.log(`‚úÖ ${availableAPIs.length} API(s) dispon√≠vel(is) para uso`)
  return true
}

// Fun√ß√£o para verificar se a API key est√° configurada e funcionando
export function isAIConfigured(): boolean {
  return isAnyAIConfigured()
}

// Fun√ß√£o para verificar se pelo menos uma API est√° configurada (mantendo compatibilidade)
export function isDeepSeekConfigured(): boolean {
  return isAnyAIConfigured()
}

// Fun√ß√£o para limpar resposta da IA e extrair JSON v√°lido
function cleanAIResponse(response: string): string {
  let cleaned = response.trim()
  
  // Remover blocos de c√≥digo markdown
  if (cleaned.includes('```json')) {
    cleaned = cleaned.replace(/```json\s*/, '').replace(/```\s*$/, '')
  }
  
  // Remover outras formata√ß√µes markdown
  cleaned = cleaned.replace(/```\s*/, '').replace(/`/g, '')
  
  // Remover quebras de linha e espa√ßos extras
  cleaned = cleaned.trim()
  
  // Se ainda houver problemas, tentar extrair apenas o JSON
  const jsonMatch = cleaned.match(/\{[\s\S]*\}/) || cleaned.match(/\[[\s\S]*\]/)
  if (jsonMatch) {
    cleaned = jsonMatch[0]
  }
  
  return cleaned
}

// Fun√ß√£o auxiliar para fazer requisi√ß√µes com fallback m√∫ltiplo
async function callAIWithFallback(messages: Array<{role: string, content: string}>, temperature = 0.7): Promise<{response: string, provider: string}> {
  const apiOrder = ['kimi', 'tng'] as const
  
  for (const apiName of apiOrder) {
    const config = API_CONFIGS[apiName]
    
    if (!config.apiKey || config.apiKey.length === 0) {
      console.log(`‚è≠Ô∏è  Pulando ${config.name} - API key n√£o configurada`)
      continue
    }
    
    try {
      console.log(`üîÑ Tentando ${config.name}...`)
      
      const response = await fetch(config.url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${config.apiKey}`,
          ...config.headers
        },
        body: JSON.stringify({
          model: config.model,
          messages,
          temperature,
          max_tokens: 1000,
        }),
      })

      console.log(`üì° ${config.name} - Status: ${response.status}`)

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        console.error(`‚ùå ${config.name} falhou:`, errorData)
        continue // Tenta pr√≥xima API
      }

      const data = await response.json()
      const content = data.choices?.[0]?.message?.content || ''
      
      if (content) {
        console.log(`‚úÖ ${config.name} - Sucesso!`)
        return { response: content, provider: config.name }
      }
      
      console.log(`‚ö†Ô∏è  ${config.name} - Resposta vazia`)
      continue
      
    } catch (error) {
      console.error(`üí• ${config.name} - Erro de conex√£o:`, error)
      continue // Tenta pr√≥xima API
    }
  }
  
  throw new Error('Todas as APIs falharam')
}

export async function analyzeClient(clientData: {
  name: string
  email: string
  phone?: string
  notes?: string
  interactionHistory?: string[]
}): Promise<AIAnalysis> {
  // Verificar se a API est√° configurada
  if (!isAnyAIConfigured()) {
    console.warn('‚ö†Ô∏è  Nenhuma API de IA configurada. Configure pelo menos uma chave no arquivo .env.local')
    return {
      leadScore: 50,
      nextAction: 'Configurar API de IA (DeepSeek, Groq ou OpenAI) para an√°lise autom√°tica',
      actionPriority: 'medium',
      reasoning: 'Nenhuma API de IA configurada - usando valores padr√£o'
    }
  }

  const prompt = `
Analise este cliente e forne√ßa um lead score de 0-100 e sugira a pr√≥xima a√ß√£o:

Cliente: ${clientData.name}
Email: ${clientData.email}
Telefone: ${clientData.phone || 'N√£o informado'}
Notas: ${clientData.notes || 'Nenhuma nota'}
Hist√≥rico de intera√ß√µes: ${clientData.interactionHistory?.join(', ') || 'Nenhuma intera√ß√£o'}

IMPORTANTE: Responda APENAS com um JSON v√°lido, sem formata√ß√£o markdown, sem \`\`\`json, apenas o objeto JSON puro:

{
  "leadScore": n√∫mero de 0-100,
  "nextAction": "descri√ß√£o da a√ß√£o sugerida",
  "actionPriority": "low" | "medium" | "high",
  "reasoning": "breve explica√ß√£o do score e a√ß√£o"
}
`

  try {
    const result = await callAIWithFallback([
      { role: 'user', content: prompt }
    ], 0.7)

    if (!result.response) throw new Error('Resposta vazia da IA')

    console.log(`ü§ñ An√°lise gerada por: ${result.provider}`)
    // Limpar resposta removendo markdown e formata√ß√£o extra
    const cleanResponse = cleanAIResponse(result.response)
    
    return JSON.parse(cleanResponse) as AIAnalysis
  } catch (error: unknown) {
    console.error('Erro na an√°lise de IA:', error)
    
    // Tratamento espec√≠fico para erro de API key
    if (error && typeof error === 'object' && 'message' in error) {
      const errorMessage = (error as Error).message
      if (errorMessage.includes('401') || errorMessage.includes('unauthorized')) {
        console.error('üîë Chave da API DeepSeek (OpenRouter) inv√°lida. Verifique sua configura√ß√£o em .env.local')
      }
    }
    
    return {
      leadScore: 50,
      nextAction: 'Fazer contato telef√¥nico para avaliar interesse',
      actionPriority: 'medium',
      reasoning: 'An√°lise padr√£o devido a erro na IA'
    }
  }
}

export async function generateMessage(
  clientName: string,
  messageType: 'email' | 'whatsapp' | 'proposal',
  context: string,
  tone: 'formal' | 'casual' | 'friendly' = 'friendly'
): Promise<string> {
  // Verificar se a API est√° configurada
  if (!isAnyAIConfigured()) {
    return 'ü§ñ **Sistema de Fallback Ativo**\n\n' + getFallbackMessage(messageType, clientName)
  }

  const toneInstructions = {
    formal: 'Tom profissional e formal',
    casual: 'Tom descontra√≠do e informal',
    friendly: 'Tom amig√°vel e caloroso'
  }

  const typeInstructions = {
    email: 'e-mail comercial',
    whatsapp: 'mensagem de WhatsApp (m√°ximo 200 caracteres)',
    proposal: 'proposta comercial detalhada'
  }

  const prompt = `
Crie uma ${typeInstructions[messageType]} para ${clientName} com ${toneInstructions[tone]}.

Contexto: ${context}

${messageType === 'whatsapp' ? 'Mantenha a mensagem concisa e direta.' : ''}
${messageType === 'proposal' ? 'Inclua se√ß√µes de problema, solu√ß√£o, benef√≠cios e pr√≥ximos passos.' : ''}

Responda apenas com o texto da mensagem, sem aspas ou formata√ß√£o adicional.
`

  try {
    const result = await callAIWithFallback([
      { role: 'user', content: prompt }
    ], 0.8)

    console.log(`ü§ñ Mensagem gerada por: ${result.provider}`)
    return result.response || getFallbackMessage(messageType, clientName)
  } catch (error) {
    console.error('Erro ao gerar mensagem:', error)
    return getFallbackMessage(messageType, clientName)
  }
}

// Fun√ß√£o para gerar mensagens de fallback quando a API falha
function getFallbackMessage(messageType: string, clientName: string): string {
  const fallbackMessages = {
    'email': `Ol√° ${clientName},

Espero que esteja tudo bem! Estou entrando em contato para apresentar nossas solu√ß√µes que podem beneficiar sua empresa.

Nossa empresa oferece solu√ß√µes personalizadas de CRM e automa√ß√£o que podem:
‚Ä¢ Aumentar a produtividade da sua equipe
‚Ä¢ Melhorar o relacionamento com clientes
‚Ä¢ Automatizar processos repetitivos
‚Ä¢ Gerar relat√≥rios detalhados

Gostaria de agendar uma conversa para entender melhor suas necessidades e apresentar como podemos ajudar?

Fico √† disposi√ß√£o para qualquer esclarecimento.

Atenciosamente,
Equipe de Vendas`,

    'whatsapp': `Ol√° ${clientName}! üëã

Tudo bem? Sou da equipe de vendas e gostaria de apresentar nossas solu√ß√µes de CRM.

Podemos ajudar sua empresa a:
‚úÖ Organizar melhor os clientes
‚úÖ Automatizar tarefas
‚úÖ Aumentar vendas

Tem 15 minutos para uma conversa? üòä`,

    'proposal': `PROPOSTA COMERCIAL

Cliente: ${clientName}
Data: ${new Date().toLocaleDateString('pt-BR')}

SITUA√á√ÉO ATUAL
Identificamos que sua empresa pode se beneficiar de uma solu√ß√£o mais eficiente de gest√£o de relacionamento com clientes.

NOSSA SOLU√á√ÉO
Sistema CRM completo com:
‚Ä¢ Gest√£o de contatos e leads
‚Ä¢ Automa√ß√£o de tarefas
‚Ä¢ Relat√≥rios e analytics
‚Ä¢ Integra√ß√£o com ferramentas existentes

BENEF√çCIOS
‚úì Aumento de 30% na produtividade
‚úì Melhoria na organiza√ß√£o de dados
‚úì Automatiza√ß√£o de processos manuais
‚úì Vis√£o 360¬∞ dos clientes

INVESTIMENTO
Planos flex√≠veis a partir de R$ 299/m√™s
ROI m√©dio de 300% em 6 meses

PR√ìXIMOS PASSOS
1. Apresenta√ß√£o personalizada
2. Per√≠odo de teste gratuito
3. Implementa√ß√£o gradual
4. Treinamento da equipe

Entre em contato para agendar uma demonstra√ß√£o!`,

    'call': `Roteiro para liga√ß√£o - ${clientName}

1. ABERTURA
"Ol√° ${clientName}, aqui √© [seu nome] da [empresa]. Como est√°? Tenho alguns minutos para conversar?"

2. APRESENTA√á√ÉO
"Estou entrando em contato porque nossa empresa ajuda empresas como a sua a otimizar o relacionamento com clientes."

3. DESCOBERTA
"Voc√™s atualmente usam algum sistema para gerenciar contatos e vendas?"
"Quais s√£o os principais desafios na gest√£o de clientes?"

4. APRESENTA√á√ÉO DA SOLU√á√ÉO
"Com base no que voc√™ me contou, nosso CRM pode ajudar especificamente com..."

5. PR√ìXIMOS PASSOS
"Gostaria de agendar uma demonstra√ß√£o de 30 minutos? Quando seria melhor para voc√™?"

6. FECHAMENTO
"√ìtimo! Vou enviar um calend√°rio por email. Tem mais alguma d√∫vida?"

OBSERVA√á√ïES:
- Manter tom amig√°vel e profissional
- Ouvir mais do que falar
- Fazer perguntas abertas
- Confirmar pr√≥ximos passos`
  }

  return fallbackMessages[messageType as keyof typeof fallbackMessages] || 
         `Mensagem personalizada para ${clientName} sobre nossos servi√ßos.`
}

export async function searchClients(query: string, clients: ClientSearchData[]): Promise<ClientSearchData[]> {
  if (!query || clients.length === 0) return clients

  // Verificar se a API est√° configurada
  if (!isAnyAIConfigured()) {
    console.warn('‚ö†Ô∏è  Nenhuma API de IA configurada. Usando busca simples.')
    // Fallback para busca simples
    return clients.filter(c => 
      c.name.toLowerCase().includes(query.toLowerCase()) ||
      c.email.toLowerCase().includes(query.toLowerCase()) ||
      (c.notes && c.notes.toLowerCase().includes(query.toLowerCase()))
    )
  }

  const prompt = `
Voc√™ √© um assistente de busca inteligente para CRM. 
Baseado na consulta "${query}", analise esta lista de clientes e retorne os IDs dos clientes mais relevantes.

Clientes dispon√≠veis:
${clients.map(c => `ID: ${c.id}, Nome: ${c.name}, Email: ${c.email}, Tipo: ${c.clientType}, Notas: ${c.notes || 'Nenhuma'}`).join('\n')}

IMPORTANTE: Responda APENAS com um array JSON v√°lido, sem formata√ß√£o markdown, sem \`\`\`json, apenas o array puro:
["id1", "id2", "id3"]

Se nenhum cliente for relevante, retorne: []
`

  try {
    const result = await callAIWithFallback([
      { role: 'user', content: prompt }
    ], 0.3)

    if (!result.response) return clients

    console.log(`ü§ñ Busca inteligente por: ${result.provider}`)
    // Limpar resposta removendo markdown e formata√ß√£o extra
    const cleanResponse = cleanAIResponse(result.response)

    const relevantIds = JSON.parse(cleanResponse) as string[]
    return clients.filter(c => relevantIds.includes(c.id))
  } catch (error) {
    console.error('Erro na busca inteligente:', error)
    if (error && typeof error === 'object' && 'message' in error) {
      const errorMessage = (error as Error).message
      if (errorMessage.includes('401') || errorMessage.includes('unauthorized')) {
        console.error('üîë Chave da API DeepSeek (OpenRouter) inv√°lida. Verifique sua configura√ß√£o em .env.local')
      }
    }
    // Fallback para busca simples
    return clients.filter(c => 
      c.name.toLowerCase().includes(query.toLowerCase()) ||
      c.email.toLowerCase().includes(query.toLowerCase()) ||
      (c.notes && c.notes.toLowerCase().includes(query.toLowerCase()))
    )
  }
}
