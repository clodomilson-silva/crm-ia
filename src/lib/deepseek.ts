import { ClientSearchData } from '@/types/crm'

// Configura√ß√£o da API OpenRouter (DeepSeek gratuita)
const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions'
const DEEPSEEK_MODEL = 'deepseek/deepseek-chat' // Modelo gratuito no OpenRouter

export interface AIAnalysis {
  leadScore: number
  nextAction: string
  actionPriority: 'low' | 'medium' | 'high'
  reasoning: string
}

// Fun√ß√£o para verificar se a API key est√° configurada
export function isDeepSeekConfigured(): boolean {
  const apiKey = process.env.DEEPSEEK_API_KEY
  console.log('API Key check:', apiKey ? `${apiKey.substring(0, 10)}...` : 'Not found')
  // Temporariamente retornar false para usar fallback at√© resolver API key
  return false
}

// Fun√ß√£o para limpar resposta da IA e extrair JSON v√°lido
function cleanAIResponse(response: string): string {
  let cleaned = response.trim()
  
  // Remover blocos de c√≥digo markdown
  if (cleaned.includes('```json')) {
    cleaned = cleaned.replace(/```json\s*/, '').replace(/```\s*$/, '')
  }
  
  // Remover outras formata√ß√µes markdown
  cleaned = cleaned.replace(/```\s*/, '').replace(/`/g, '')
  
  // Remover quebras de linha e espa√ßos extras
  cleaned = cleaned.trim()
  
  // Se ainda houver problemas, tentar extrair apenas o JSON
  const jsonMatch = cleaned.match(/\{[\s\S]*\}/) || cleaned.match(/\[[\s\S]*\]/)
  if (jsonMatch) {
    cleaned = jsonMatch[0]
  }
  
  return cleaned
}

// Fun√ß√£o auxiliar para fazer requisi√ß√µes √† API OpenRouter
async function callDeepSeekAPI(messages: Array<{role: string, content: string}>, temperature = 0.7): Promise<string> {
  if (!isDeepSeekConfigured()) {
    throw new Error('API DeepSeek n√£o configurada')
  }

  console.log('Making API call to OpenRouter...')
  
  const response = await fetch(OPENROUTER_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
      'HTTP-Referer': 'http://localhost:3000',
      'X-Title': 'CRM com IA',
    },
    body: JSON.stringify({
      model: DEEPSEEK_MODEL,
      messages,
      temperature,
      max_tokens: 1000,
    }),
  })

  console.log('Response status:', response.status)

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}))
    console.error('API Error:', errorData)
    throw new Error(`OpenRouter API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`)
  }

  const data = await response.json()
  return data.choices?.[0]?.message?.content || ''
}

export async function analyzeClient(clientData: {
  name: string
  email: string
  phone?: string
  notes?: string
  interactionHistory?: string[]
}): Promise<AIAnalysis> {
  // Verificar se a API est√° configurada
  if (!isDeepSeekConfigured()) {
    console.warn('‚ö†Ô∏è  API DeepSeek (OpenRouter) n√£o configurada. Configure DEEPSEEK_API_KEY no arquivo .env.local')
    return {
      leadScore: 50,
      nextAction: 'Configurar API DeepSeek via OpenRouter para an√°lise autom√°tica',
      actionPriority: 'medium',
      reasoning: 'API DeepSeek n√£o configurada - usando valores padr√£o'
    }
  }

  const prompt = `
Analise este cliente e forne√ßa um lead score de 0-100 e sugira a pr√≥xima a√ß√£o:

Cliente: ${clientData.name}
Email: ${clientData.email}
Telefone: ${clientData.phone || 'N√£o informado'}
Notas: ${clientData.notes || 'Nenhuma nota'}
Hist√≥rico de intera√ß√µes: ${clientData.interactionHistory?.join(', ') || 'Nenhuma intera√ß√£o'}

IMPORTANTE: Responda APENAS com um JSON v√°lido, sem formata√ß√£o markdown, sem \`\`\`json, apenas o objeto JSON puro:

{
  "leadScore": n√∫mero de 0-100,
  "nextAction": "descri√ß√£o da a√ß√£o sugerida",
  "actionPriority": "low" | "medium" | "high",
  "reasoning": "breve explica√ß√£o do score e a√ß√£o"
}
`

  try {
    const response = await callDeepSeekAPI([
      { role: 'user', content: prompt }
    ], 0.7)

    if (!response) throw new Error('Resposta vazia da IA')

    // Limpar resposta removendo markdown e formata√ß√£o extra
    const cleanResponse = cleanAIResponse(response)
    
    return JSON.parse(cleanResponse) as AIAnalysis
  } catch (error: unknown) {
    console.error('Erro na an√°lise de IA:', error)
    
    // Tratamento espec√≠fico para erro de API key
    if (error && typeof error === 'object' && 'message' in error) {
      const errorMessage = (error as Error).message
      if (errorMessage.includes('401') || errorMessage.includes('unauthorized')) {
        console.error('üîë Chave da API DeepSeek (OpenRouter) inv√°lida. Verifique sua configura√ß√£o em .env.local')
      }
    }
    
    return {
      leadScore: 50,
      nextAction: 'Fazer contato telef√¥nico para avaliar interesse',
      actionPriority: 'medium',
      reasoning: 'An√°lise padr√£o devido a erro na IA'
    }
  }
}

export async function generateMessage(
  clientName: string,
  messageType: 'email' | 'whatsapp' | 'proposal',
  context: string,
  tone: 'formal' | 'casual' | 'friendly' = 'friendly'
): Promise<string> {
  // Verificar se a API est√° configurada
  if (!isDeepSeekConfigured()) {
    return 'Para usar o gerador de mensagens com IA, configure sua chave da API DeepSeek (OpenRouter) no arquivo .env.local'
  }

  const toneInstructions = {
    formal: 'Tom profissional e formal',
    casual: 'Tom descontra√≠do e informal',
    friendly: 'Tom amig√°vel e caloroso'
  }

  const typeInstructions = {
    email: 'e-mail comercial',
    whatsapp: 'mensagem de WhatsApp (m√°ximo 200 caracteres)',
    proposal: 'proposta comercial detalhada'
  }

  const prompt = `
Crie uma ${typeInstructions[messageType]} para ${clientName} com ${toneInstructions[tone]}.

Contexto: ${context}

${messageType === 'whatsapp' ? 'Mantenha a mensagem concisa e direta.' : ''}
${messageType === 'proposal' ? 'Inclua se√ß√µes de problema, solu√ß√£o, benef√≠cios e pr√≥ximos passos.' : ''}

Responda apenas com o texto da mensagem, sem aspas ou formata√ß√£o adicional.
`

  try {
    const response = await callDeepSeekAPI([
      { role: 'user', content: prompt }
    ], 0.8)

    return response || getFallbackMessage(messageType, clientName)
  } catch (error) {
    console.error('Erro ao gerar mensagem:', error)
    return getFallbackMessage(messageType, clientName)
  }
}

// Fun√ß√£o para gerar mensagens de fallback quando a API falha
function getFallbackMessage(messageType: string, clientName: string): string {
  const fallbackMessages = {
    'email': `Ol√° ${clientName},

Espero que esteja tudo bem! Estou entrando em contato para apresentar nossas solu√ß√µes que podem beneficiar sua empresa.

Nossa empresa oferece solu√ß√µes personalizadas de CRM e automa√ß√£o que podem:
‚Ä¢ Aumentar a produtividade da sua equipe
‚Ä¢ Melhorar o relacionamento com clientes
‚Ä¢ Automatizar processos repetitivos
‚Ä¢ Gerar relat√≥rios detalhados

Gostaria de agendar uma conversa para entender melhor suas necessidades e apresentar como podemos ajudar?

Fico √† disposi√ß√£o para qualquer esclarecimento.

Atenciosamente,
Equipe de Vendas`,

    'whatsapp': `Ol√° ${clientName}! üëã

Tudo bem? Sou da equipe de vendas e gostaria de apresentar nossas solu√ß√µes de CRM.

Podemos ajudar sua empresa a:
‚úÖ Organizar melhor os clientes
‚úÖ Automatizar tarefas
‚úÖ Aumentar vendas

Tem 15 minutos para uma conversa? üòä`,

    'proposal': `PROPOSTA COMERCIAL

Cliente: ${clientName}
Data: ${new Date().toLocaleDateString('pt-BR')}

SITUA√á√ÉO ATUAL
Identificamos que sua empresa pode se beneficiar de uma solu√ß√£o mais eficiente de gest√£o de relacionamento com clientes.

NOSSA SOLU√á√ÉO
Sistema CRM completo com:
‚Ä¢ Gest√£o de contatos e leads
‚Ä¢ Automa√ß√£o de tarefas
‚Ä¢ Relat√≥rios e analytics
‚Ä¢ Integra√ß√£o com ferramentas existentes

BENEF√çCIOS
‚úì Aumento de 30% na produtividade
‚úì Melhoria na organiza√ß√£o de dados
‚úì Automatiza√ß√£o de processos manuais
‚úì Vis√£o 360¬∞ dos clientes

INVESTIMENTO
Planos flex√≠veis a partir de R$ 299/m√™s
ROI m√©dio de 300% em 6 meses

PR√ìXIMOS PASSOS
1. Apresenta√ß√£o personalizada
2. Per√≠odo de teste gratuito
3. Implementa√ß√£o gradual
4. Treinamento da equipe

Entre em contato para agendar uma demonstra√ß√£o!`,

    'call': `Roteiro para liga√ß√£o - ${clientName}

1. ABERTURA
"Ol√° ${clientName}, aqui √© [seu nome] da [empresa]. Como est√°? Tenho alguns minutos para conversar?"

2. APRESENTA√á√ÉO
"Estou entrando em contato porque nossa empresa ajuda empresas como a sua a otimizar o relacionamento com clientes."

3. DESCOBERTA
"Voc√™s atualmente usam algum sistema para gerenciar contatos e vendas?"
"Quais s√£o os principais desafios na gest√£o de clientes?"

4. APRESENTA√á√ÉO DA SOLU√á√ÉO
"Com base no que voc√™ me contou, nosso CRM pode ajudar especificamente com..."

5. PR√ìXIMOS PASSOS
"Gostaria de agendar uma demonstra√ß√£o de 30 minutos? Quando seria melhor para voc√™?"

6. FECHAMENTO
"√ìtimo! Vou enviar um calend√°rio por email. Tem mais alguma d√∫vida?"

OBSERVA√á√ïES:
- Manter tom amig√°vel e profissional
- Ouvir mais do que falar
- Fazer perguntas abertas
- Confirmar pr√≥ximos passos`
  }

  return fallbackMessages[messageType as keyof typeof fallbackMessages] || 
         `Mensagem personalizada para ${clientName} sobre nossos servi√ßos.`
}

export async function searchClients(query: string, clients: ClientSearchData[]): Promise<ClientSearchData[]> {
  if (!query || clients.length === 0) return clients

  // Verificar se a API est√° configurada
  if (!isDeepSeekConfigured()) {
    console.warn('‚ö†Ô∏è  API DeepSeek (OpenRouter) n√£o configurada. Usando busca simples.')
    // Fallback para busca simples
    return clients.filter(c => 
      c.name.toLowerCase().includes(query.toLowerCase()) ||
      c.email.toLowerCase().includes(query.toLowerCase()) ||
      (c.notes && c.notes.toLowerCase().includes(query.toLowerCase()))
    )
  }

  const prompt = `
Voc√™ √© um assistente de busca inteligente para CRM. 
Baseado na consulta "${query}", analise esta lista de clientes e retorne os IDs dos clientes mais relevantes.

Clientes dispon√≠veis:
${clients.map(c => `ID: ${c.id}, Nome: ${c.name}, Email: ${c.email}, Tipo: ${c.clientType}, Notas: ${c.notes || 'Nenhuma'}`).join('\n')}

IMPORTANTE: Responda APENAS com um array JSON v√°lido, sem formata√ß√£o markdown, sem \`\`\`json, apenas o array puro:
["id1", "id2", "id3"]

Se nenhum cliente for relevante, retorne: []
`

  try {
    const response = await callDeepSeekAPI([
      { role: 'user', content: prompt }
    ], 0.3)

    if (!response) return clients

    // Limpar resposta removendo markdown e formata√ß√£o extra
    const cleanResponse = cleanAIResponse(response)

    const relevantIds = JSON.parse(cleanResponse) as string[]
    return clients.filter(c => relevantIds.includes(c.id))
  } catch (error) {
    console.error('Erro na busca inteligente:', error)
    if (error && typeof error === 'object' && 'message' in error) {
      const errorMessage = (error as Error).message
      if (errorMessage.includes('401') || errorMessage.includes('unauthorized')) {
        console.error('üîë Chave da API DeepSeek (OpenRouter) inv√°lida. Verifique sua configura√ß√£o em .env.local')
      }
    }
    // Fallback para busca simples
    return clients.filter(c => 
      c.name.toLowerCase().includes(query.toLowerCase()) ||
      c.email.toLowerCase().includes(query.toLowerCase()) ||
      (c.notes && c.notes.toLowerCase().includes(query.toLowerCase()))
    )
  }
}
