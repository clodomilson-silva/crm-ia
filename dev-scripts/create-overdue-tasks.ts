import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function createOverdueTasks() {
  try {
    // Buscar alguns clientes para criar tarefas atrasadas
    const clients = await prisma.client.findMany({
      take: 3
    })

    if (clients.length === 0) {
      console.log('Nenhum cliente encontrado. Execute o seed primeiro.')
      return
    }

    const today = new Date()
    
    // Criar tarefas atrasadas para testar notifica√ß√µes
    const overdueTasks = [
      {
        title: 'Ligar para follow-up urgente',
        description: 'Cliente interessado em fechar neg√≥cio, aguardando retorno',
        type: 'call',
        priority: 'high',
        status: 'pending',
        dueDate: new Date(today.getTime() - 3 * 24 * 60 * 60 * 1000), // 3 dias atr√°s
        aiSuggested: false,
        clientId: clients[0].id,
      },
      {
        title: 'Enviar proposta comercial',
        description: 'Enviar proposta detalhada conforme solicitado na reuni√£o',
        type: 'email',
        priority: 'high',
        status: 'pending',
        dueDate: new Date(today.getTime() - 2 * 24 * 60 * 60 * 1000), // 2 dias atr√°s
        aiSuggested: false,
        clientId: clients[1].id,
      },
      {
        title: 'Reagendar reuni√£o',
        description: 'Cliente pediu para reagendar, confirmar nova data',
        type: 'meeting',
        priority: 'medium',
        status: 'pending',
        dueDate: new Date(today.getTime() - 1 * 24 * 60 * 60 * 1000), // 1 dia atr√°s
        aiSuggested: false,
        clientId: clients[2].id,
      },
      {
        title: 'Follow-up p√≥s-venda',
        description: 'Verificar satisfa√ß√£o do cliente com o produto/servi√ßo',
        type: 'follow-up',
        priority: 'low',
        status: 'pending',
        dueDate: new Date(today.getTime() - 5 * 24 * 60 * 60 * 1000), // 5 dias atr√°s
        aiSuggested: false,
        clientId: clients[0].id,
      }
    ]

    for (const taskData of overdueTasks) {
      await prisma.task.create({
        data: taskData
      })
      console.log(`‚úÖ Tarefa criada: ${taskData.title} (${taskData.priority})`)
    }

    console.log(`\nüéØ ${overdueTasks.length} tarefas atrasadas criadas com sucesso!`)
    console.log('üì± Agora voc√™ pode testar o sistema de notifica√ß√µes.')
    
  } catch (error) {
    console.error('‚ùå Erro ao criar tarefas atrasadas:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createOverdueTasks()
